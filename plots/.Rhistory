library(ggseg3d)
library(dplyr)
library(tidyr)
library(ggplot2)
ggseg3d() %>%
remove_axes() %>%
pan_camera("right lateral")
library(ggsegDesterieux)
ggseg3d(atlas = desterieux_3d)%>%
remove_axes() %>%
pan_camera("right lateral")
# install.packages("remotes")
remotes::install_github("LCBC-UiO/ggsegSchaefer")
library(ggseg3d)
ggseg3d(atlas = schaefer17_3d) %>%
pan_camera("right lateral")
library(ggsegSchaefer)
library(ggseg3d)
ggseg3d(atlas = schaefer17_3d) %>%
pan_camera("right lateral")
ggseg3d(atlas = schaefer17_3d) %>%
remove_axes() %>%
pan_camera("right lateral")
library(ggsegSchaefer)
library(ggseg3d)
ggseg3d(atlas = schaefer17_3d) %>%
remove_axes() %>%
pan_camera("right lateral")
library(circlize)
schaefer17_col_3d<-schaefer17_3d
for(i in 1:6){
schaefer17_col_3d$ggseg_3d[[i]]$colour<-rand_color(181,luminosity = "bright")
schaefer17_col_3d$ggseg_3d[[i]]$colour[schaefer17_col_3d$ggseg_3d[[i]]$region == "medialwall"]<-"#c9c9c9"
}
View(schaefer17_col_3d$ggseg_3d[[i]]$colour)
schaefer17_col_3d$ggseg_3d[[i]]$colour
i
schaefer17_col_3d$ggseg_3d[[6]]$colour
schaefer17_col_3d$ggseg_3d[[7]]$colour
schaefer17_col_3d<-schaefer17_3d
for(i in 1:6){
schaefer17_col_3d$ggseg_3d[[i]]$colour<-rand_color(201,luminosity = "bright")
schaefer17_col_3d$ggseg_3d[[i]]$colour[schaefer17_col_3d$ggseg_3d[[i]]$region == "medialwall"]<-"#c9c9c9"
}
ggseg3d(atlas = schaefer17_col_3d) %>%
remove_axes() %>%
pan_camera("right lateral")
<br>]
library(prettydoc)
install.packages("prettydoc")
library(prettydoc)
library(pandic)
library(pandoc)
install.packages("pandoc")
library(brainconn)
x <- example_unweighted_undirected
p <- brainconn3D(atlas ="schaefer300_n7", conmat=x, show.legend = F)
p
str(x)
class(x)
View(x)
which(x == 1)
length(which(x ==1))
x[3750]
which(x$V17 == 1)
which(x$V18 == 1)
library(faux) # for rnorm function
library("VennDiagram")
dat <- rnorm_multi(n = 30000,
mu = c(3106.02, 7104.09, 1.20444e+06,6.15572),
sd = c(575.809, 1147.63, 117663,2.15057),
r = c(0.34, .5, 0.12,0.54,0.1,0.28))
dat$X1
dat$X1 - mean(dat$X1)
(dat$X1 - mean(dat$X1))^2
sum((dat$X1 - mean(dat$X1))^2)
# total sums of square = sum((dat$X1 - mean(dat$X1))^2)
tss_X1 <- sum((dat$X1 - mean(dat$X1))^2)
tss_X2 <- sum((dat$X2 - mean(dat$X2))^2)
tss_X3 <- sum((dat$X3 - mean(dat$X3))^2)
tss_X1
tss_X2
tss_X3
# read in 1000 genomes reference file
genomes1000<-read.table(gzfile("reference.1000G.maf.0.005.txt.gz"), header=T)
# format 1000 genomes file
names(genomes1000)[which(names(genomes1000) == "BP")]<-"POS"
names(genomes1000)[which(names(genomes1000) == "A1")]<-"A1_1000"
names(genomes1000)[which(names(genomes1000) == "A2")]<-"A2_1000"
genomes1000$MAF<-NULL
genomes1000 <- as.data.table(genomes1000)
workingd<-"C:/Users/k1894405/OneDrive - King's College London/PhD/genomic_pca_simulation_started_Jan2020/"
setwd(workingd)
setwd(paste0(getwd(),"/GWAS_header"))
# read in 1000 genomes reference file
genomes1000<-read.table(gzfile("reference.1000G.maf.0.005.txt.gz"), header=T)
# format 1000 genomes file
names(genomes1000)[which(names(genomes1000) == "BP")]<-"POS"
names(genomes1000)[which(names(genomes1000) == "A1")]<-"A1_1000"
names(genomes1000)[which(names(genomes1000) == "A2")]<-"A2_1000"
genomes1000$MAF<-NULL
genomes1000 <- as.data.table(genomes1000)
library(data.table)
genomes1000 <- as.data.table(genomes1000)
gwas_files <- "pheno_PC"
setwd(workingd)
for(i in gwas_files){
print(i)
file <- get(i)
print(head(file))
# merge gwas file with 1000 genomes - transform into data.table first for more efficient computation
file <- as.data.table(file)
file <- merge(file, genomes1000, by=c("SNP","CHR","POS"), all=T)
# delete empty SNP names
file <- file[file$SNP != "NaN",]
# only keep complete cases - resulting in 8422649 SNPs for speeding gwas
file <- file[complete.cases(file),]
# if effect allele in gwas aligns with effect allele in 1000 genomes, keep beta as is, if not (i.e. if it aligns with other allele), multiply beta * (-1)
file$beta <- ifelse(file$A1 == file$A1_1000, file$beta, file$beta * (-1))
print("Created beta")
# if effect allele in gwas aligns with effect allele in 1000 genomes, keep EAF as is, if not, 1-EAF
file$EAF<-ifelse(file$A1 == file$A1_1000, file$eaf_A1, 1-file$eaf_A1)
print("Created EAF")
# create Z column using beta and se
file$Z <- file$beta / file$se
print("Created Z")
# keep rows as expected by mutlivariate GWAMA function
file <- file[,c("SNP","CHR","POS","A1_1000","A2_1000","EAF","N","Z","p")]
# name columns as expected by software
names(file)[which(names(file)=="A1_1000")] <- "A1"
names(file)[which(names(file)=="A2_1000")] <- "A2"
names(file)[which(names(file)=="POS")] <- "BP"
names(file)[which(names(file)=="p")] <- "P"
print(head(file))
fwrite(file, file=paste0(getwd(),"/GWAMA_format/allSNP_1000genomes/genomes1000_",i), quote=FALSE, col.names=TRUE, row.names=F, sep=" ", na="NA")
}
setwd(workingd)
setwd(paste0(getwd(),"/Evaluate_GWAMA"))
library(data.table)
pheno_PC <- fread("Risk_PC_GWAS.txt", header=T)
setwd(workingd)
for(i in gwas_files){
print(i)
file <- get(i)
print(head(file))
# merge gwas file with 1000 genomes - transform into data.table first for more efficient computation
file <- as.data.table(file)
file <- merge(file, genomes1000, by=c("SNP","CHR","POS"), all=T)
# delete empty SNP names
file <- file[file$SNP != "NaN",]
# only keep complete cases - resulting in 8422649 SNPs for speeding gwas
file <- file[complete.cases(file),]
# if effect allele in gwas aligns with effect allele in 1000 genomes, keep beta as is, if not (i.e. if it aligns with other allele), multiply beta * (-1)
file$beta <- ifelse(file$A1 == file$A1_1000, file$beta, file$beta * (-1))
print("Created beta")
# if effect allele in gwas aligns with effect allele in 1000 genomes, keep EAF as is, if not, 1-EAF
file$EAF<-ifelse(file$A1 == file$A1_1000, file$eaf_A1, 1-file$eaf_A1)
print("Created EAF")
# create Z column using beta and se
file$Z <- file$beta / file$se
print("Created Z")
# keep rows as expected by mutlivariate GWAMA function
file <- file[,c("SNP","CHR","POS","A1_1000","A2_1000","EAF","N","Z","p")]
# name columns as expected by software
names(file)[which(names(file)=="A1_1000")] <- "A1"
names(file)[which(names(file)=="A2_1000")] <- "A2"
names(file)[which(names(file)=="POS")] <- "BP"
names(file)[which(names(file)=="p")] <- "P"
print(head(file))
fwrite(file, file=paste0(getwd(),"/GWAMA_format/allSNP_1000genomes/genomes1000_",i), quote=FALSE, col.names=TRUE, row.names=F, sep=" ", na="NA")
}
for(i in gwas_files){
print(i)
file <- get(i)
print(head(file))
# merge gwas file with 1000 genomes - transform into data.table first for more efficient computation
file <- as.data.table(file)
file <- merge(file, genomes1000, by=c("SNP","CHR","POS"), all=T)
# delete empty SNP names
file <- file[file$SNP != "NaN",]
# only keep complete cases - resulting in 8422649 SNPs for speeding gwas
file <- file[complete.cases(file),]
# if effect allele in gwas aligns with effect allele in 1000 genomes, keep beta as is, if not (i.e. if it aligns with other allele), multiply beta * (-1)
file$beta <- ifelse(file$A1 == file$A1_1000, file$beta, file$beta * (-1))
print("Created beta")
# if effect allele in gwas aligns with effect allele in 1000 genomes, keep EAF as is, if not, 1-EAF
file$EAF<-ifelse(file$A1 == file$A1_1000, file$eaf_A1, 1-file$eaf_A1)
print("Created EAF")
# create Z column using beta and se
file$Z <- file$beta / file$se
print("Created Z")
# keep rows as expected by mutlivariate GWAMA function
file <- file[,c("SNP","CHR","POS","A1_1000","A2_1000","EAF","Z","p")]
# name columns as expected by software
names(file)[which(names(file)=="A1_1000")] <- "A1"
names(file)[which(names(file)=="A2_1000")] <- "A2"
names(file)[which(names(file)=="POS")] <- "BP"
names(file)[which(names(file)=="p")] <- "P"
print(head(file))
fwrite(file, file=paste0(getwd(),"/GWAMA_format/allSNP_1000genomes/genomes1000_",i), quote=FALSE, col.names=TRUE, row.names=F, sep=" ", na="NA")
}
phenoPC <- file
rm("pheno_PC")
rm(file)
names(phenoPC)[2:ncol(phenoPC)]<-paste0("phenoPC_",names(phenoPC))[2:ncol(phenoPC)]
genoPC<-fread("GWAMA_1000genomes_header.txt",header=T,data.table = F)
names(genoPC)[which(names(genoPC)== "SNPID")]<-"SNP"
names(genoPC)[2:ncol(genoPC)]<-paste0("genoPC_",names(genoPC))[2:ncol(genoPC)]
setwd(workingd)
setwd(paste0(getwd(),"/Evaluate_GWAMA"))
genoPC<-fread("GWAMA_1000genomes_header.txt",header=T,data.table = F)
names(genoPC)[which(names(genoPC)== "SNPID")]<-"SNP"
names(genoPC)[2:ncol(genoPC)]<-paste0("genoPC_",names(genoPC))[2:ncol(genoPC)]
getwd
getwd()
genoPC<-fread("GWAMA_1000genomes_header.txt",header=T,data.table = F)
names(genoPC)[which(names(genoPC)== "SNPID")]<-"SNP"
names(genoPC)[2:ncol(genoPC)]<-paste0("genoPC_",names(genoPC))[2:ncol(genoPC)]
both<-merge(genoPC, phenoPC, by = "SNP")
PC_plot<-ggplot(both, aes(x=phenoPC_Z, y=genoPC_Z)) +
geom_point(color="seagreen4",alpha=0.4) +
#ggtitle("Speeding sumstats vs. our genotypic PC sumstats") +
geom_smooth(method=lm, se=FALSE) +
scale_x_continuous(name = "Pheno PC sumstats Z scores")+
#, limits = c(5, 15), breaks = seq(5, 15, 2))
scale_y_continuous(name = "Our genotypic PC sumstats Z scores")+
#, limits = c(5,15), breaks = seq(5, 15, 2)) +
theme(plot.title = element_text(hjust = 0.5), panel.background = element_blank(), axis.line = element_line(color="black"), axis.line.x = element_line(color="black"))+ theme_bw()+
geom_abline(intercept=0,slope=(1),linetype="dashed",color="red",show.legend=T, size=0.5,alpha=0.7)
setwd(workingd)
setwd(paste0(substring(getwd(), first = 1, last = 18),"Documents/GitHub/genomicPCA/plots"))
png("phenoPC_vs_genoPC1000.png", width = 7, height = 6, units = "in", res = 500)
PC_plot
dev.off()
head(both)
both<-both[,c("phenoPC_Z","genoPC_Z")]
head(both)
PC_plot<-ggplot(both, aes(x=phenoPC_Z, y=genoPC_Z)) +
geom_point(color="seagreen4",alpha=0.4) +
#ggtitle("Speeding sumstats vs. our genotypic PC sumstats") +
geom_smooth(method=lm, se=FALSE) +
scale_x_continuous(name = "Pheno PC sumstats Z scores")+
#, limits = c(5, 15), breaks = seq(5, 15, 2))
scale_y_continuous(name = "Our genotypic PC sumstats Z scores")+
#, limits = c(5,15), breaks = seq(5, 15, 2)) +
theme(plot.title = element_text(hjust = 0.5), panel.background = element_blank(), axis.line = element_line(color="black"), axis.line.x = element_line(color="black"))+ theme_bw()+
geom_abline(intercept=0,slope=(1),linetype="dashed",color="red",show.legend=T, size=0.5,alpha=0.7)
library(ggplot2)
PC_plot<-ggplot(both, aes(x=phenoPC_Z, y=genoPC_Z)) +
geom_point(color="seagreen4",alpha=0.4) +
#ggtitle("Speeding sumstats vs. our genotypic PC sumstats") +
geom_smooth(method=lm, se=FALSE) +
scale_x_continuous(name = "Pheno PC sumstats Z scores")+
#, limits = c(5, 15), breaks = seq(5, 15, 2))
scale_y_continuous(name = "Our genotypic PC sumstats Z scores")+
#, limits = c(5,15), breaks = seq(5, 15, 2)) +
theme(plot.title = element_text(hjust = 0.5), panel.background = element_blank(), axis.line = element_line(color="black"), axis.line.x = element_line(color="black"))+ theme_bw()+
geom_abline(intercept=0,slope=(1),linetype="dashed",color="red",show.legend=T, size=0.5,alpha=0.7)
getwd()
png("phenoPC_vs_genoPC1000.png", width = 7, height = 6, units = "in", res = 500)
PC_plot
dev.off()
install.packages("klippy")
remotes::install_github("rlesur/klippy")
library(klippy)
library(htmltab)
library(htmltools)
